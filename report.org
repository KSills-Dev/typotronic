#+OPTIONS: toc:nil
#+TITLE:Project 2 Report
#+AUTHOR:Kenneth Sills, Kevin Orr, Elijah Malaby
#+LaTeX_HEADER: \usepackage[margin=0.5in]{geometry}
#+LaTeX_HEADER: \usepackage[boxed,linesnumbered]{algorithm2e}
#+LaTeX_HEADER: \usepackage{mathtools}
#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \usepackage{hyperref}
#+LaTeX_HEADER: \DeclarePairedDelimiter{\floor}{\lfloor}{\rfloor}

* Breaking Down Problems
Insertion, deletion, and substitution can be solved using a simple recurrence that
can be easily memoized. Transposition proved to be more involved.
We separate the transpositions from all other typo forms. By first keeping a
record of where possible transpositions can occur (and each permutation of
possible propagation lengths), we vastly simplify the recurrence. In the
memoized solution, we also separate the initial table fill from backtracking.
* Parameters for the recursion
The two arrays $p$ and $t$ (pattern and typo) and indexes $i$ and $j$
representing the positions in $p$ and $t$ currently being compared
* What recurrence can you use
The naive recurrence we came up with was:

#+BEGIN_EXPORT latex
  \[
  C(p, t) =
  \begin{cases}
  \min \left\{
  \begin{aligned}
  & C(p[1..m-1], t) + insertCost(p[m], p[m-1]), \\
  & C(p, t[1..n-1]) + deleteCost(t[n], t[n-1]), \\
  & C(p[1..m-1], t[1..n-1]) + substituteCost(p[m], t[n]), \\
  & C(p[1..m-1], t[1..n-2]\, ||\footnotemark\, t[n]) + transposeCost(t[n-1], t[n])
  \end{aligned}
  \right\}, & m > 1, n > 1 \\

  C(p[1..m-1], t) + insertCost(p[m], p[m-1]), & m = 1, n > 1 \\
  C(p, t[1..n-1]) + deleteCost(t[n], t[n-1]), & m > 1, n = 1 \\
  0, & m = 1, n = 1
  \end{cases} \\

  \begin{align*}
  \rm{where}~ m & = \rm{length}(pattern), \\
              n & = \rm{length}(typo)
  \end{align*}
  \]
  \footnotetext{Note that || is the string concatenation operator here}
#+END_EXPORT


This ended up being extremely inefficient in practice: the transposition
operator doesn't allow us to memoize the main function using simply a 2d array,
since transposing affects the typo string when recursing. We can't simply assume
that the typo string and pattern strings are simply truncated between calls.

* What are the base cases
Whenever $i$ or $j$ are equal to 1. If $i = 1$, the remaining characters in
$t[1..j-1]$ were trivially all insertions at the beginning. If $j = 1$, the
remaining characters in $p[1..i-1]$ were deleted. If both $i = 1$ and $j = 1$,
there are no further characters to compare.
* What data structure would you use
A map from pairs of $(i, j)$ to the cost of the recurrence for $(i, j)$, as well
as a map from pairs of $(i, j)$ to a set of numbers of transpositions $k$ such
that for each a chain of transpositions may have occurred in $p[(i-k)..i]$ and
$t[(j-k)..j]$.

We found that the best structure to use for memoizing would be 2D array with
each cell containing the lowest cost typo, the overall cost of accumulated
typos, and the index to the lowest cost next cell.

As well, a hash table is kept, indexed by the squashed coordinates of our 2D
array to store possible transposition sites. This hash table contains arrays of
size 12, where the distance into the table is the number of propagating
transpositions, the contents of which is the cost to perform that chain of
transpositions.

* Pseudocode for a memoized dynamic programming solution
  
#+begin_export latex
\AlgoDontDisplayBlockMarkers\SetAlgoNoEnd\SetAlgoNoLine%
\SetStartEndCondition{ }{}{}%
\begin{algorithm}[H]
\KwIn{data: Table containing the memoized data}
\KwIn{transposes: Set of possible transpositions}
\KwIn{correct: The correct string}
\KwIn{actual: The actual string with typos} 
\KwIn{i: Current position into the correct string}
\KwIn{j: Current position into the actual string}
\KwOut{Running cost of typos}
\SetKwProg{Func}{Algorithm}{\string:}{end}
\SetKwFunction{fill}{Fill}
\SetKwFunction{findtransp}{find\_transposes}
\SetKwFunction{main}{Main}
\SetKw{return}{return}
\SetKwFor{While}{while}{:}{fintq}%
\SetKwFor{Until}{until}{:}{fintq}%
\Func{\main()}{
  Fill the parents of data with $(-1, -1)$\\
  \findtransp()\\
  \fill(i, j)\\
  Let $p$ be $(i,j)$\\
  \Until{$p==(-1,-1)$}{
    Record the error made at $data[p]$\\
    $p$ = $data[p]$\\
  }
  \return the recorded errors\\
  
}
\end{algorithm}
\begin{algorithm}
\SetKwProg{Func}{Algorithm}{\string:}{end}
\SetKwFunction{findtransp}{find\_transposes}
\SetKwFunction{transposecost}{transpose\_cost}
\SetKwFunction{len}{length}
\SetKw{KwFrom}{from}
\SetKw{KwTo}{to}
\SetKwProg{Fn}{def}{\string:}{}
\SetKwFor{For}{for}{\string:}{}%
\SetKwIF{If}{ElseIf}{Else}{if}{:}{elif}{else:}{}%
\AlgoDontDisplayBlockMarkers\SetAlgoNoEnd\SetAlgoNoLine%
\Fn{\findtransp()}{
  \For{i \KwFrom \len(correct) \KwTo 2}{
    \For{j \KwFrom \len(actual) \KwTo 2}{
      Let $correct\_char$ be $correct[i]$\\
      Let $current\_char$ be $actual[j]$\\
      Let $left\_char$ be $actual[j-1]$\\
      \If{$left\_char==correct\_char$ and $current\_char != correct\_char$}{
        Start the running cost at $\transposecost(left\_char, current\_char)$\\
        \For{k \KwFrom 1 \KwTo 12}{
          Let $correct\_char$ be $correct[i-n]$\\
          Let $left\_char$ be $actual[j-1-n]$\\
          \If{$current\_char == correct\_char$}{
            Add a possible transposition to $transpoes[i,j]$
              with the current running cost\\
          }
          \If{$correct\_char != left\_char$}{
            break the innermost loop\\
          }
          Add $\transposecost(left\_char, current\_char)$ to the running cost\\
        }
      }
    }
  }
}
\end{algorithm}
\pagebreak
\begin{algorithm}[H]
\SetKwProg{Func}{Algorithm}{\string:}{end}
\SetKwFunction{fill}{Fill}
\SetKwFunction{insertcost}{insert\_cost}
\SetKwFunction{deletecost}{delete\_cost}
\SetKwFunction{substitutecost}{substitute\_cost}
\SetKwFunction{len}{length}
\SetKw{return}{return}
\SetKw{KwFrom}{from}
\SetKwProg{Fn}{def}{\string:}{}
\SetKw{KwInsert}{Insert}
\SetKw{KwDelete}{Delete}
\SetKw{KwNone}{None}
\SetKw{KwSubstitute}{Substitute}
\SetKw{KwTranspose}{Transpose}
\SetKwIF{If}{ElseIf}{Else}{if}{:}{elif}{else:}{}%
\Fn{\fill{i, j}}{
  \uIf{$data[i,j]$ has a value}{
    \return the cost in $data[i,j]$\\
  }
  \uElseIf{$i==1$ and $j==1$} {
    \return $0$
  }
  \uElseIf{$i==1$} {
    Let the cost be $\insertcost(i,j) + \fill(i, j-1)$\\
    Store the cost in $data[i,j]$\\
    Set the typo of $data[i,j]$ to \KwInsert\\
    Set the parent of $data[i,j]$ to $(i, j-1)$\\
    \return the cost\\
  }
  \uElseIf{$j==1$}{
    Let the cost be $\deletecost(i,j) + \fill(i-1, j)$\\
    Store the cost in $data[i,j]$\\
    Set the typo of $data[i,j]$ to \KwDelete\\
    Set the parent of $data[i,j]$ to $(i-1, j)$\\
    \return the cost\\
  }
  \Else{
    Let $options$ be a list of possible errors.\\
    Add an \KwInsert error to $options$ with cost 
      $\insertcost(i,j) + \fill(i, j-1)$ and parent
      $(i, j-1)$\\
    Add a \KwDelete error to $options$ with cost 
      $\deletecost(i,j) + \fill(i-1, j)$ and parent
      $(i-1, j)$\\
    \uIf{$correct[i]==actual[j]$}{
      Add a \KwNone error with cost $\fill(i-1, j-1)$ and parent $(i-1,j-1)$\\
    }
    \Else{
      Add a \KwSubstitute error to $options$ with cost
        $\substitutecost(i,j) + \fill(i-1, j-1)$ and parent
        $(i-1, j-1)$\\
    }
    \uIf{There are transpositions in $transpoes[i,j]$}{
      \For{$t$ in $transpoes[i,j]$}{
        Add a \KwTranspose error with cost
          $t.cost + \fill(i-t.length, j-t.length)$ and parent
          $(i-t.length, j-t.length)$\\
      }
    }
    Pick the minimum option in $options$\\
    Store the cost, error type, and parent in in $data[i,j]$\\
    \return the cost\\
  }
}
\end{algorithm}
#+end_export

* Worst case time complexity
The worst-case of our algorithm will encompass:
 - O(n * m) Transposition identification.
 - O(n * m) Fill table pass
 - O(n + m) Backtracking pass
So, as a whole, the algorithm takes O(n * m) time complexity.

* Pseudocode for nested loop
* Can the space complexity of the iterative algorithm be improved relative to the memoized algorithm
  No, because the iterative algorithm has to build up every case from the base
cases regardless of if that case will be used to compute the final result. The
memoized algorithm, on the other hand, will only used enough space to store the
results of the cases used.
* Describe one advantage and disadvantage of the iterative algorithm
One advantage is improved performance: there is no overhead on the runtime stack
due to recursion. A disadvantage in general is that it is more complex to
determine the correct order to iterate over the array. However, since this
algorithm has a very simple pattern of dependencies, choosing the right order to
solve the sub-problems is also very simple. In this case the call to $(i, j)$
depends on $(i-1, j)$, $(i, j-1)$, and $(i-1, j-1)$.


#  LocalWords:  memoized memoize
